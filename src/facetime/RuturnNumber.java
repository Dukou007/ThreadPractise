package facetime;


import java.util.Arrays;

public class RuturnNumber {
    public static void main(String[] args) {
        int[] t = {3, 2, 1, 5, 7, 9};
//        大-小
        int n=t.length;
        for (int j = 0; j < n - 1; j++) {
            for (int i = 0; i < n - j - 1; i++) {
                if (t[i] < t[i+1]) {
                    int m = t[i+1];
                    t[i+1] = t[i];
                    t[i] = m;
                }
            }
        }
        /**
         * 这两行代码是典型的双重循环结构，通常用于排序算法中，比如冒泡排序、插入排序等。
         *
         * - 第一行 `for (int i = 0; i < n-1; i++) {`：
         *   - 这是外部循环，控制着排序过程中的迭代次数。
         *   - `int i = 0;`：定义一个名为 `i` 的整数变量，并将其初始化为 0，表示外部循环的起始值。
         *   - `i < n-1;`：这是外部循环的终止条件，当 `i` 小于 `n-1` 时，循环继续进行。`n` 是待排序数组的长度。由于冒泡排序每次都会将最大（或最小）的元素移动到数组的末尾，所以在最后一次迭代时，只需要比较前面 `n-1` 个元素即可确定最后一个元素的位置。
         *   - `i++`：在每次外部循环迭代结束后，将 `i` 的值增加 1，以便下次循环继续。
         *
         * - 第二行 `for (int j = 0; j < n-i-1; j++)`：
         *   - 这是内部循环，控制着每次外部循环中的比较次数。
         *   - `int j = 0;`：定义一个名为 `j` 的整数变量，并将其初始化为 0，表示内部循环的起始值。
         *   - `j < n-i-1;`：这是内部循环的终止条件，当 `j` 小于 `n-i-1` 时，循环继续进行。在每次外部循环迭代时，由于已经确定了最后 `i` 个元素的顺序，所以在内部循环中只需比较前面 `n-i-1` 个元素。
         *   - `j++`：在每次内部循环迭代结束后，将 `j` 的值增加 1，以便下次循环继续。
         *
         * 这两行代码共同实现了冒泡排序算法中的核心双重循环结构，用于遍历待排序数组并执行相邻元素的比较和交换操作。
         */
//        System.out.println(Arrays.toString(t));
        System.out.println(Arrays.toString(t));
    }
}
